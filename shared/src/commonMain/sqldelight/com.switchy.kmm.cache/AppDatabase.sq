import kotlin.Long;

-- HOUSE POWER TABLES
createHousePowerUsageTableIfNeeded:
CREATE TABLE IF NOT EXISTS DBHousePowerUsage (
  epochSeconds INTEGER AS Long PRIMARY KEY,
  power REAL NOT NULL DEFAULT 0
);

insertHousePowerUsage:
INSERT OR REPLACE INTO DBHousePowerUsage VALUES ?;

getHousePowerUsage:
SELECT * FROM DBHousePowerUsage
WHERE (:from = NULL OR epochSeconds >= :from)
AND (:to = NULL OR epochSeconds <= :to)
ORDER BY epochSeconds ASC
;

removeHousePowerUsage:
DELETE FROM DBHousePowerUsage
WHERE epochSeconds BETWEEN :from AND :to
;

removeAllHousePowerUsage:
DELETE FROM DBHousePowerUsage;


-- HOUSE ENERGY TABLES
createHouseEnergyUsageTableIfNeeded:
CREATE TABLE IF NOT EXISTS DBHouseEnergyUsage (
  epochSeconds INTEGER AS Long PRIMARY KEY,
  energy REAL NOT NULL DEFAULT 0
);

insertHouseEnergyUsage:
INSERT OR REPLACE INTO DBHouseEnergyUsage VALUES ?;

getHouseEnergyUsage:
SELECT * FROM DBHouseEnergyUsage
WHERE (:from = NULL OR epochSeconds >= :from)
AND (:to = NULL OR epochSeconds <= :to)
ORDER BY epochSeconds ASC
;

removeHouseEnergyUsage:
DELETE FROM DBHouseEnergyUsage
WHERE epochSeconds BETWEEN :from AND :to
;

removeAllHouseEnergyUsage:
DELETE FROM DBHouseEnergyUsage;

--SYNC STATUS TABLES
createSyncStatusTableIfNeeded:
CREATE TABLE IF NOT EXISTS DBSyncStatus(
tableName TEXT PRIMARY KEY,
mostRecentTime INTEGER AS Long NOT NULL,
leastRecentTime INTEGER AS Long NOT NULL,
startTime INTEGER AS Long
);

insertSyncStatus:
INSERT OR REPLACE INTO DBSyncStatus
VALUES ?;

getSyncStatus:
SELECT * FROM DBSyncStatus
WHERE (:tableName = NULL OR :tableName = tableName);

removeSyncStatus:
DELETE FROM DBSyncStatus
WHERE (:tableName = NULL OR :tableName = tableName);